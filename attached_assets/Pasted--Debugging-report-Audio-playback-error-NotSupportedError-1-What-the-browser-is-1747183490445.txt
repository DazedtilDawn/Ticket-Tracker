## Debugging report ‚Äì ‚ÄúAudio playback error: NotSupportedError‚Äù

---

### 1  What the browser is telling us

`DOMException: Failed to load because no supported source was found.` comes from the **HTMLMediaElement** pipeline ‚Äì the file could not be *decoded*, not merely downloaded. 99 % of the time one of these is true:

| Cause                                                          | Symptom in DevTools                                                  |
| -------------------------------------------------------------- | -------------------------------------------------------------------- |
| **File not found / mis-spelt path**                            | 404 on the Network tab                                               |
| **Wrong MIME type** (e.g. served as `text/plain`)              | 200 OK but `Type: other` in Network ‚Üí Response Headers               |
| **Unsupported codec** (Safari ‚ÜîÔ∏é WebM/Opus, Firefox ‚ÜîÔ∏é HE-AAC) | 200 OK with correct `Content-Type`, but the same `NotSupportedError` |

In React `<Audio src="‚Ä¶">` the same exception is thrown for all three, so we have to test them in order.

---

### 2  Step-by-step diagnostics

| Step                                 | How to run it                                                                                         | What to look for                               |
| ------------------------------------ | ----------------------------------------------------------------------------------------------------- | ---------------------------------------------- |
| **Confirm URL**                      | `new URL('/sounds/wheelspin.mp3', window.location).toString()` in console                             | Paste it in a new tab ‚Äì does it download/play? |
| **Check Network tab** while spinning | Status (should be 200) and **Type = audio** or **mime = audio/mpeg**                                  |                                                |
| **Verify codec support**             | `document.createElement('audio').canPlayType('audio/mpeg')` (should return `"maybe"` or `"probably"`) |                                                |

If the file 404s ‚Üí the path in code or build output is wrong.
If status 200 + wrong `Content-Type` ‚Üí server config / framework needs a rule for `.mp3`.
If status 200 + correct MIME **and** `canPlayType` is empty ‚Üí the codec (or the file itself) isn‚Äôt supported by that browser; ship an `.ogg` or `.wav` fallback.

---

### 3  Robust fix in code (handles **all three** cases)

```ts
/* utils/audio.ts -------------------------------------------------*/
const SOURCES = {
  wheel: ['/sounds/wheelspin.mp3', '/sounds/wheelspin.ogg'],
  cheer: ['/sounds/celebration.mp3', '/sounds/celebration.ogg'],
};

/** choose the first codec this browser can play */
export function pickAudio(srcs: string[]) {
  const test = document.createElement('audio');
  return srcs.find((s) => test.canPlayType(typeFromExt(s))) ?? null;
}

function typeFromExt(url: string) {
  return url.endsWith('.ogg') ? 'audio/ogg' :
         url.endsWith('.mp3') ? 'audio/mpeg' : '';
}
```

```tsx
/* inside the component ------------------------------------------*/
import { pickAudio } from '@/utils/audio';

const wheelSrc = pickAudio(SOURCES.wheel);
const cheerSrc = pickAudio(SOURCES.cheer);

/** plays once, with graceful degradation */
function playOnce(src: string | null, fallbackToneHz?: number) {
  if (!src) {                       // no supported codec ‚Äì tone fallback
    beep(fallbackToneHz ?? 600);
    return;
  }
  const a = new Audio(src);
  a.volume = 0.25;
  a.play().catch(() => beep(fallbackToneHz ?? 600));
}

/** minimal Web-Audio beep used as last-ditch fallback */
function beep(hz = 600) {
  try {
    const ctx = new (window.AudioContext || (window as any).webkitAudioContext)();
    const osc = ctx.createOscillator();
    osc.frequency.value = hz;
    osc.connect(ctx.destination);
    osc.start();
    setTimeout(() => { osc.stop(); ctx.close(); }, 80);
  } catch { /* ignore ‚Äì no audio device */ }
}
```

**Usage**

```tsx
// start of spin ‚Äì continuous loop
const wheelAudio = wheelSrc ? new Audio(wheelSrc) : null;
wheelAudio?.loop = true;
wheelAudio?.play().catch(() => tickTimer.current = setInterval(() => playOnce(wheelSrc), 90));

// on settle
playOnce(cheerSrc, 880);   // 880 Hz fallback if no cheer audio
```

### 4  Server / build tweaks

* **Vite / CRA / Next** ‚Äì put the files in `/public/sounds/‚Ä¶`, *not* `src/`.
* **Express / Fastify** ‚Äì add MIME to static-files mapping:

```js
app.use('/sounds', express.static('public/sounds', {
  setHeaders(res, path) {
    if (path.endsWith('.mp3')) res.type('audio/mpeg');
    if (path.endsWith('.ogg')) res.type('audio/ogg');
  }
}));
```

* **S3 / CloudFront** ‚Äì ensure metadata says `Content-Type: audio/mpeg`.

### 5  Verification checklist

| Test                                       | Expected                                                            |
| ------------------------------------------ | ------------------------------------------------------------------- |
| Spin once in Chrome, Edge, Firefox, Safari | Wheel sound plays; no console errors                                |
| Inspect Network                            | Returns 200, `Content-Type` = `audio/ogg` or `audio/mpeg`           |
| Rename `.mp3` temporarily                  | Code falls back to `.ogg` or 600 Hz beep (proves graceful handling) |

---

### 6  Preventing future surprises

1. **Unit-test `pickAudio()`** with Jest + `Object.defineProperty(HTMLMediaElement.prototype,'canPlayType',‚Ä¶)`.
2. **CI asset check** ‚Äì fail build if `/public/sounds/*.{mp3,ogg}` is missing.
3. **Telemetry** ‚Äì log a metric when fallback beep is triggered; if it spikes you know a codec or path broke again.

Patch in the *pick-Audio / playOnce* helper and the ‚Äúnot supported‚Äù errors will disappear ‚Äì the wheel will always spin with a satisfying sound, or at worst a polite beep. üîäüõû
