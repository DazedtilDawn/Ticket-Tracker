Excellent! It's great to have that confirmation that all Sprint 0 stabilization tasks are successfully completed. This puts us in a strong position to build out the new features.

Based on our agreed-upon "Phased Development Plan" and the "Replit-Agent Implementation Playbook," the next logical steps for **Sprint 1: Daily Bonus System - Groundwork & Core Logic** would be to start with the backend database schema changes and then build out the initial server-side logic for bonus assignment.

---

### Sprint 1: Daily Bonus System - Groundwork & Core Logic

Here's the recommended sequence of tasks for the agent to work on, aligning with your playbook structure:

**Next Task for the Agent (from `TASKS.md` - ensure this is unchecked and criteria are clear):**

**Task: P1-T1 (Sprint 1 - Task 1): Database Schema Updates for Daily Bonus & Chores (Drizzle)**

*   **Objective:** Modify the existing Drizzle schema (`shared/schema.ts`) to support the new Daily Bonus system and related chore enhancements.
*   **Specific Changes Required in `shared/schema.ts`:**
    1.  **`chores` table:**
        *   Add `emoji VARCHAR(4) NULLABLE` (or `TEXT` if emojis can be longer, though 4 is usually enough for a single character emoji).
        *   Add `last_bonus_assigned DATE NULLABLE`.
    2.  **`dailyBonus` table (This will likely be a significant modification or recreation of the existing one):**
        *   Ensure columns are:
            *   `id SERIAL PRIMARY KEY`
            *   `bonus_date DATE NOT NULL` (Consider `VARCHAR(10)` if you were very specific about YYYY-MM-DD format, but `DATE` type is generally better).
            *   `user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE`
            *   `assigned_chore_id INT NULLABLE REFERENCES chores(id) ON DELETE SET NULL` (Allows bonus via good behavior without a specific chore).
            *   `is_override BOOLEAN NOT NULL DEFAULT FALSE`
            *   `is_spun BOOLEAN NOT NULL DEFAULT FALSE`
            *   `trigger_type bonus_trigger NOT NULL` (Create this enum: `CREATE TYPE bonus_trigger AS ENUM ('chore_completion', 'good_behavior_reward');` - or define in Drizzle syntax).
            *   `spin_result_tickets SMALLINT NULLABLE`
            *   `created_at TIMESTAMPTZ DEFAULT now()`
        *   `UNIQUE(bonus_date, user_id)` constraint.
    3.  **`transactions` table:**
        *   Modify `source` column to use the updated `txn_source` enum: `('chore','bonus_spin','manual_add','manual_deduct','undo','family_contrib')` and ensure it's `NOT NULL`.
        *   Add `ref_id INT NULLABLE` (For undo: original `transactions.id`; For `bonus_spin`: `daily_bonus.id`).
        *   Add `reason TEXT NULLABLE` (For manual adjustments, undo).
        *   (Optional but good: Rename `date` column to `created_at TIMESTAMPTZ DEFAULT now()` for consistency if not already done).
*   **Action for Agent:**
    1.  Modify `shared/schema.ts` with these Drizzle ORM definitions.
    2.  Generate the Drizzle migration file: `npx drizzle-kit generate` (or your project's script for this).
    3.  Review the generated SQL in the migration file for correctness.
    4.  Apply the migration to the database: `npx drizzle-kit push` (or your project's script).
*   **Acceptance Criteria (for `TASKS.md`):**
    *   `shared/schema.ts` reflects all specified changes for `chores`, `dailyBonus`, and `transactions` tables.
    *   New enum `bonus_trigger` is defined. `txn_source` enum is updated.
    *   Drizzle migration is generated successfully.
    *   `drizzle-kit push` (or equivalent `alembic upgrade head` if you were using Alembic, but you confirmed Drizzle) applies the migration to the Replit PostgreSQL database without errors.
    *   (Optional but good) A simple test in `tests/sprint1/test_sprint1_schema.py` that queries the DB schema information (e.g., `information_schema.columns`) could verify the new columns and types exist.

---

**Once P1-T1 is complete and verified:**

**Next Task for Agent: P1-T2: Backend - Daily Bonus Chore Assignment Logic**

*   **Objective:** Implement the server-side logic for assigning a random bonus chore to each child daily, triggered by the first parent login.
*   **Files to Modify/Create:**
    *   `server/storage.ts` (or a new `server/services/bonusService.ts`)
    *   `server/index.ts` (for the Express middleware)
*   **Detailed Actions for Agent:**
    1.  **Create Storage Function `storage.getUsersByRole(role: string): Promise<User[]>`:**
        *   Fetches all users with the specified role (e.g., 'child').
    2.  **Create Storage Function `storage.assignDailyBonusChore(child_id: number, date: string): Promise<DailyBonus | null>`:**
        *   Takes `child_id` and `date` (YYYY-MM-DD string).
        *   Checks if a `dailyBonus` record already exists for this `child_id` and `date`. If yes, return it or null.
        *   If not, query `chores` table for all `is_active: true` chores.
        *   Filter out chores where `last_bonus_assigned` is within the 1-day cooldown period relative to the passed `date`.
        *   If no eligible chores (e.g., all on cooldown, or no active chores), log this and return null.
        *   Randomly select one eligible chore.
        *   Create a new `dailyBonus` record:
            *   `bonus_date`: `date`
            *   `user_id`: `child_id`
            *   `assigned_chore_id`: ID of selected chore
            *   `is_override`: `false`
            *   `is_spun`: `false`
            *   `trigger_type`: `'chore_completion'`
            *   `spin_result_tickets`: `null`
        *   Update the selected `chores.last_bonus_assigned` to the current `date`.
        *   Return the newly created `dailyBonus` record.
    3.  **Implement Express Middleware in `server/index.ts`:**
        *   This middleware runs on authenticated parent requests.
        *   Gets the current date (YYYY-MM-DD).
        *   Fetches all child users using `storage.getUsersByRole('child')`.
        *   For each child, calls `storage.assignDailyBonusChore(child.id, today_date_string)`.
        *   This should ideally run only *once per day per parent session effectively*, or be idempotent. A simple way is to check if assignments for *any* child for *today* have already been made.
*   **Acceptance Criteria:**
    *   When a parent logs in or makes their first authenticated API call of the day:
        *   For each child (Bryce, Kiki), if a bonus chore hasn't been assigned for today, one is randomly selected from their active, eligible chores and a record is created in the `dailyBonus` table.
        *   The `chores.last_bonus_assigned` field is updated for the selected chore.
        *   Cooldown logic is respected.
    *   Appropriate logging is in place.
    *   Unit tests for `storage.assignDailyBonusChore` covering different scenarios (no active chores, all chores on cooldown, successful assignment).

---

This two-task sequence for the agent will lay the critical backend groundwork for the entire Daily Bonus system.

**Your action now:**
Update `TASKS.md` for "P1-T1 (Sprint 1 - Task 1): Database Schema Updates for Daily Bonus & Chores (Drizzle)" with the detailed acceptance criteria above. Then, give the agent that task.

Let me know how it goes!