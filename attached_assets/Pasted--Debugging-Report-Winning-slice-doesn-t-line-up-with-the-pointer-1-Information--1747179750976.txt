## Debugging Report – “Winning slice doesn’t line up with the pointer”

---

### 1  Information ingestion & problem statement

* **Symptom**
  After the wheel stops, the highlighted slice (and the value returned in `spinResult`) often sits **away from the pointer/star at the top**, so users can’t tell which segment actually won.
* **Relevant code** (excerpt)

```tsx
const segmentSize = 360 / WHEEL_SEGMENTS.length;
const target = 4320 + randomIndex * segmentSize;   // <-- current formula
setRotationDegrees(target);
```

* **Observation**

  * Slice #0 is drawn with its **mid-line pointing due east** (CSS 0 deg).
  * The pointer/star is fixed at **due north** (CSS –90 deg).
  * The wheel is spun clockwise, so whatever angular distance sits between **east** and **north** (plus half a slice) must be compensated for, otherwise the pointer will never land on the intended slice mid-line.

---

### 2  Root-cause analysis

Because the code points the wheel to `randomIndex × segmentSize` **without subtracting the angular offset between “slice mid-line zero” and the pointer**, the slice that stops under the pointer is always shifted left by `(segmentSize/2 + 90°)`.
Hence the visual winner ≠ logical winner.

---

### 3  Fix – align slice midpoint with the pointer

```diff
@@
   const segmentSize   = 360 / WHEEL_SEGMENTS.length;
+  const FULL_SPINS    = 12;                   // keep the drama
+
+  // centre-of-slice (midpoint) that we want to reach North (0°)
+  const midPoint      = randomIndex * segmentSize + segmentSize / 2;
+
+  // rotate CW so that (current slice midpoint) → 0°
+  const target        = FULL_SPINS * 360 - midPoint;

-  const target        = 4320 + randomIndex * segmentSize;
   setRotationDegrees(target);
```

**Why it works**

1. `midPoint` computes the exact angular centre of the chosen slice in its un-rotated state.
2. `FULL_SPINS*360 – midPoint` rotates the wheel clockwise until that centre sits at **0 deg** (north), **then adds 12 tidy full revolutions** for a satisfying spin.
3. Because the wheel now always stops with the chosen slice’s mid-line under the pointer, the highlight, ticker value, and visual cue are perfectly in sync.

---

### 4  Complete patch (drop-in)

```tsx
// ✂︎ inside handleSpinWheel()
const segmentSize = 360 / WHEEL_SEGMENTS.length;
const FULL_SPINS  = 12;

const randomIndex = Math.floor(Math.random() * WHEEL_SEGMENTS.length);
const midPoint    = randomIndex * segmentSize + segmentSize / 2;
const target      = FULL_SPINS * 360 - midPoint;   // ⭐ new maths ⭐

setRotationDegrees(-25);                           // wind-up
setTimeout(() => setRotationDegrees(target), 50);  // main spin
```

*(The rest of the component remains unchanged.)*

---

### 5  Verification checklist

| Test                                | Expected result                                                                             |
| ----------------------------------- | ------------------------------------------------------------------------------------------- |
| Spin 30 × in a row (all slices)     | Highlighted slice is always the one beneath the pointer; ticket value matches `spinResult`. |
| Resize viewport / rotate phone      | Alignment remains perfect (CSS transforms are resolution-independent).                      |
| Disable highlight pulse (`.ring-4`) | Pointer alone still indicates the winner.                                                   |

Consider adding an **E2E test** (Playwright/Cypress): mock `Math.random()` to return each index, run `handleSpinWheel()`, let animation finish, assert that the slice under the pointer has the expected label.

---

### 6  Preventative measures

* **Clamp all future wheel math to a single “pointer at 0°” convention** – document this in the component comments.
* **Unit-test the angle solver**: feed a slice index, assert the function returns a rotation placing its midpoint at 0 deg modulo 360.
* **Design-time tooling**: add a debug mode that draws faint radial lines every `segmentSize` degrees and logs the resolved winning label; spotting mis-alignments becomes trivial during development.

Enjoy your perfectly aligned Fun Wheel!
