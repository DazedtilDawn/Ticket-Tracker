Gotcha — it *is* jarring to see the pointer land on a pink “4” but hand out seven tickets.
Let’s turn that slice into something the kids instantly understand **and** wire it so the math always matches what the UI shows.

---

## ① Pick the mechanic you like

| Option                    | What kids see                         | What actually happens                                                                     | Pros                                            | Cons                                                   |
| ------------------------- | ------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------------------------- | ------------------------------------------------------ |
| **A. “×2” (true double)** | Slice shows a big “×2” (and maybe 🎉) | We multiply the ticket value that **triggered** the wheel (e.g. the chore’s base-tickets) | ✨Super clear, exciting, scales with chore sizes | Extra query to fetch the original ticket award         |
| **B. “Lucky 7”**          | Slice shows a bold “7”                | Always awards 7 tickets                                                                   | Easiest - no context needed                     | Still a fixed number; not as magical                   |
| **C. “Mystery?”**         | Slice shows “?”                       | Server randomly picks 3–10 and reveals in toast                                           | Keeps things unpredictable                      | Slightly more code; could frustrate if it feels random |

Your original comment (“guessing this was meant to be double”) suggests **Option A** is what you’d intended, so I’ll outline that.

---

## ② Update the wheel art

**client/constants/bonus-wheel.ts**

```ts
export const WHEEL_SEGMENTS = [
  { value: 1,  color: "#FF6384", label: "1"  },
  { value: 2,  color: "#36A2EB", label: "2"  },
  { value: 3,  color: "#FFCE56", label: "3"  },
  { value: 5,  color: "#4BC0C0", label: "5"  },
  { value: 2,  color: "#9966FF", label: "2"  },
  { value: 10, color: "#FF9F40", label: "10" },
- { value: 3,  color: "#FF66CC", label: "3"  },
- { value: 4,  color: "#7BC043", label: "4"  },  // ← old confusing slice
+ { type: "double", color: "#FF66CC", label: "×2", multiplier: 2 },
+ { value: 4,       color: "#7BC043", label: "4" },
];
```

*Keep `type` undefined for normal slices; when `type === "double"` we treat it specially.*

---

## ③ Server-side: apply the multiplier

```ts
// server/controllers/bonusSpin.ts
if (selectedSlice.type === "double") {
  // 1) look up the transaction that created this dailyBonus
  const sourceTx = await db('transactions')
        .where({ ref_id: dailyBonus.id, source: dailyBonus.trigger_type })
        .first();

  const ticketsAwarded = sourceTx.delta_tickets * selectedSlice.multiplier;
  await creditTickets(userId, ticketsAwarded, { source: 'bonus_spin', ref_id: dailyBonus.id });

  payload.segment_label = '×2';
  payload.tickets_awarded = ticketsAwarded;
} else {
  // …existing fixed-value logic…
}
```

*If you cache the “baseTickets” when you create the dailyBonus record you can avoid the extra DB hit.*

---

## ④ Client-side: display it correctly

```tsx
// ChildBonusWheel.tsx  – when result comes in
if (payload.segment_label === '×2') {
  setResultText(`Double! +${payload.tickets_awarded} tickets`);
} else {
  setResultText(`+${payload.tickets_awarded} tickets`);
}
```

(You already have the amount, so you no longer rely on the static label.)

---

## ⑤ QA checklist

1. Spin wheel with a 3-ticket chore → landing on ×2 slice should award **6**.
2. Spin wheel with good-behavior (e.g. 0 tickets) → ×2 slice should award **0** & toast “Double 0 😅” (works, but if you’d rather guarantee a minimum, clamp in server).
3. Other slices still behave exactly the same.

---

### Want a different flavour?

*Swap Option B or C into the same pattern: just set `type: 'lucky7'` or `type: 'mystery'` and adjust the server formula.*

Let me know which variant you’d like, and I can hand you the exact patch (or push it straight to the repo 👍).
