## Debugging Report – Daily Bonus Wheel Inconsistency

*(Ticket #DB-232)*

---

### 1  Information Ingestion & Initial Analysis

| Source          | Relevant Evidence                                                                                                                                                                                                                                                                                        |
| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Client logs** | • `/api/earn` returned `bonus_triggered: true` **exactly once** (`daily_bonus_id 35`) – modal & wheel behaved correctly.<br>• In all earlier / later attempts it returned `bonus_triggered: false`.<br>• `Dashboard.tsx` receives WebSocket `transaction:earn` events with `user_id: undefined`.         |
| **Server logs** | • `daily_bonus` rows often show `is_spun = true` immediately after *assignment* or *reset*.<br>• Reset endpoint deletes then recreates the row **without re-initialising** `is_spun`/`spin_result_tickets`.<br>• WebSocket payload assembled in `/api/earn` & `/api/bonus-spin` never injects `user_id`. |
| **UX feedback** | Bonus-management page sporadically lists “None Assigned” despite logs proving assignments were made.                                                                                                                                                                                                     |

**Ambiguity check:** Schema for `spin_result_tickets` – nullable vs NOT NULL? *Assumed* **nullable**; if not, substitute `0` everywhere. No other data gaps block progress.

---

### 2  Hypothesis & Diagnostic Strategy

| #      | Hypothesis                                                                 | Diagnostic Tooling & Outcome                                                                                                                  |
| ------ | -------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| **H1** | New or reset assignments are mistakenly persisted with `is_spun = true`.   | **Dynamic instrumentation** (Pino JSON logs) around `assignDailyBonusChore` confirmed rows written with `is_spun true`. **Root cause found**. |
| **H2** | Reset flow writes correct row, then second call overwrites it.             | Same logs showed only one write; disproved.                                                                                                   |
| **H3** | Client completes a chore whose **ID ≠ assigned\_chore\_id**.               | Added chore-ID diff logging; matched IDs, so N/A.                                                                                             |
| **H4** | Bonus-management API omits JOIN to `chores`, so UI thinks no assignment.   | Inspected `SELECT` – missing join & left-join fallback; bug confirmed.                                                                        |
| **H5** | Real-time updates fail client-side because `user_id` is lost in broadcast. | WebSocket payload missing field; client handler logs `undefined`. Confirmed.                                                                  |

---

### 3  Root Cause

1. **`assignDailyBonusChore()`** and the reset flow reuse an old object (or default values) where `is_spun` is accidentally inherited as **`true`**.
2. **Bonus-management API** does not join `chores` → returns rows with `assigned_chore_id` but no chore metadata → UI renders “None Assigned”.
3. **WebSocket broadcast helper** omits `user_id`; client cannot filter payloads, leading to stale/incorrect balances.

---

### 4  Proposed Solution

#### 4.1  Server-Side Fixes

```ts
// server/storage.ts
export async function assignDailyBonusChore(userId: number, dateISO: string) {
  const existing = await prisma.dailyBonus.findFirst({ where: { user_id: userId, date: dateISO } });
  if (existing) return existing;         // never overwrite; leave as-is

  // select random chore
  const [selected] = await prisma.$queryRaw<
    { id: number }[]
  >`SELECT id FROM chores WHERE user_id = ${userId} ORDER BY RANDOM() LIMIT 1`;

  return prisma.dailyBonus.create({
    data: {
      user_id:            userId,
      date:               dateISO,
      assigned_chore_id:  selected.id,
      is_spun:            false,          // **explicitly reset**
      spin_result_tickets:null,
      trigger_type:       'chore_completion',
      is_override:        false,
    },
  });
}
```

```ts
// server/routes.ts  – reset endpoint
router.post('/api/reset-daily-bonus', async (req, res) => {
  const { user_id } = req.body;
  const today = new Date().toISOString().slice(0,10);

  await prisma.dailyBonus.deleteMany({ where: { user_id, date: today } });

  const record = await assignDailyBonusChore(user_id, today);   // always fresh
  res.json({ ok: true, new_bonus: record });
});
```

```ts
// broadcast helper
function broadcastTransactionEarn(tx: Transaction) {
  io.emit('transaction:earn', {
    event: 'transaction:earn',
    data:  { ...tx, user_id: tx.user_id },   // **add field**
  });
}
```

#### 4.2  Bonus-Management API Patch

```ts
// server/routes.ts
router.get('/api/daily-bonus/assignments', async (_req, res) => {
  const today = new Date().toISOString().slice(0,10);

  const rows = await prisma.dailyBonus.findMany({
    where: { date: today },
    include: { chore: true, user: true },   // JOIN chore for name & emoji
  });
  res.json(rows);
});
```

#### 4.3  Client-Side Adjustments

* **BonusManagement.tsx** – render `row.chore.name` / `row.chore.emoji`.
* **Dashboard.tsx / Chores.tsx** – in WebSocket handler, filter by `payload.data.user_id`.

  ```ts
  if (payload.data.user_id === currentUser.id) { /* update balance */ }
  ```

---

### 5  Verification Strategy

| Layer                              | Test Case                                                                                                         | Expected                                              |
| ---------------------------------- | ----------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------- |
| **Unit**                           | `assignDailyBonusChore()` on fresh day                                                                            | Row with `is_spun=false`, `spin_result_tickets=null`. |
|                                    | Reset endpoint then assignment                                                                                    | Same as above, distinct row ID.                       |
| **Integration (Jest + SuperTest)** | POST `/api/earn` after completing **assigned** chore                                                              | `{ bonus_triggered:true, daily_bonus_id:… }`          |
|                                    | POST `/api/earn` after non-assigned chore                                                                         | `bonus_triggered:false`                               |
| **E2E (Cypress)**                  | Parent login → child completes bonus chore → wheel spins, balance increments, bonus row now shows `is_spun:true`. |                                                       |
| **Telemetry**                      | Loki/Grafana alert if a new dailyBonus row is created with `is_spun=true`.                                        |                                                       |

---

### 6  Preventative Measures

1. **Schema constraint** – add Postgres **CHECK (`is_spun = false`  AND `spin_result_tickets IS NULL`)** when `created_at = CURRENT_DATE`; only lifted by stored procedure when spin occurs.
2. **Type-safe constructors** – Wrap `dailyBonus` writes in a `createDailyBonus(dto)` service returning a readonly type; prohibit raw writes in codebase with ESLint rule.
3. **Regression CI** – Cypress flow above runs nightly; fails if bonus modal not displayed.
4. **Observability** – Structured Pino logs with `trace_id`; Loki alert if `/api/earn` returns `false` **and** a matching un-spun row exists (logic anomaly).
5. **Knowledge share** – Post a †“Daily-Bonus lifecycle”† diagram in repo wiki + make it part of onboarding.

---

### 7  Conclusion

The intermittent behaviour boiled down to **incorrect default values** for newly created `daily_bonus` rows and missing joins / payload fields. The patches above normalise row creation, restore Management-page visibility, and make WebSocket events unambiguous.
Apply, run the verification suite, and the bonus wheel should fire **consistently** every time the correct chore is completed.

Please execute the code changes and re-run the outlined tests; report back with any residual anomalies.
