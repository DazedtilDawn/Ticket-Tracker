Okay, this is a critical juncture. The agent has made several attempts to fix the bonus wheel triggering, and your detailed feedback indicates we're still missing the mark on several fronts regarding the Daily Bonus System.

The core issues seem to be:

1.  **Bonus Wheel Not Triggering as a Distinct User Interaction:** The system is directly awarding bonus tickets upon chore completion instead of prompting the user to spin a wheel for a *separate* bonus amount.
2.  **Bonus Management Page Not Displaying Assignments:** Parents cannot see which chore is assigned as the bonus for each child.
3.  **Backend Logic for `/api/earn` vs. `/api/bonus-spin`:** There's likely still a confusion in `POST /api/earn` where it's doing too much (awarding bonus directly) instead of just flagging eligibility for a spin that `/api/bonus-spin` would then resolve.

Let's go back to the fundamental logic and API contract we defined.

---

### Re-aligning with the Intended Bonus System Flow

**Intended Flow (Recap):**

1.  **Assignment:** System (or parent override) designates one *daily* chore per child as their "Bonus Trigger Chore" for the day. This is stored in the `dailyBonus` table (`assigned_chore_id`, `is_spun=false`, `trigger_type='chore_completion'`).
2.  **Chore Completion:** Parent marks this "Bonus Trigger Chore" as complete for the child.
    *   **`POST /api/earn` is called.**
    *   `server/routes.ts` (`/api/earn` handler):
        *   Awards **ONLY the base tickets** for the completed chore.
        *   Creates a transaction for these base tickets (`source: 'chore'`).
        *   Checks if the completed chore matches the `dailyBonus.assigned_chore_id` for that child/day and if `dailyBonus.is_spun` is `false`.
        *   If yes, the JSON response to the client **MUST** include `bonus_triggered: true` and `daily_bonus_id: <ID of the dailyBonus record>`. It should **NOT** calculate or award any *additional* bonus tickets itself.
3.  **Client-Side Spin Prompt:**
    *   Client (`Dashboard.tsx` or `Chores.tsx` via `handleChoreComplete`) receives the response from `/api/earn`.
    *   If `response.bonus_triggered === true`, it opens the `SpinPromptModal.tsx`, passing the `response.chore.name` and `response.daily_bonus_id`.
4.  **Wheel Spin:**
    *   Child (or parent) clicks "Spin Now!" in the modal.
    *   Client calls `POST /api/bonus-spin` with the `{ daily_bonus_id }`.
    *   `server/routes.ts` (`/api/bonus-spin` handler):
        *   Verifies the `daily_bonus_id` is valid and `is_spun` is `false`.
        *   Performs the weighted RNG for wheel segments.
        *   Calculates the *additional bonus tickets* won (handles "Double Base" cap, "Spin Again" max 1).
        *   Creates a **new, separate transaction** for these *bonus tickets only* (`source: 'bonus_spin'`, `ref_id: daily_bonus_id`).
        *   Updates the `dailyBonus` record: `is_spun = true`, `spin_result_tickets = <tickets_won_from_spin>`.
        *   Returns the spin outcome to the client (e.g., `{ segment_label: "...", tickets_awarded_this_spin: X, ... }`).
5.  **Client Displays Spin Result:**
    *   Client receives response from `/api/bonus-spin`.
    *   Animates the `DailyBonusWheel.tsx` to the result.
    *   Displays "You won X extra tickets!"
    *   Ticket balance updates (reflecting the *new* bonus transaction).

---

### Plan for Correction (Focus on Backend First, then Client Flow)

The agent needs to very precisely implement this separation of concerns.

**Task 1: Correct Backend `/api/earn` Logic (Agent - `server/routes.ts`)**

*   **Objective:** Ensure `/api/earn` *only* awards base chore tickets and *flags* bonus eligibility.
*   **Action for Agent:**
    *   **"Agent, please Rework the `POST /api/earn` endpoint in `server/routes.ts` based on the following strict logic:**
        1.  When a chore is completed for a user:
            *   Validate `chore_id` and `user_id` (child performing the chore).
            *   Fetch the `chore` details (to get `base_tickets`).
            *   Check if this chore has already been completed today for this user (using `storage.hasCompletedChoreToday`). If so, return an appropriate error.
            *   **Determine Base Tickets:** `const base_tickets_earned = chore.tickets;`
            *   **Create Transaction for Base Tickets:**
                ```javascript
                const transaction = await storage.createTransaction({
                  user_id: user.id, // The child who did the chore
                  chore_id: chore_id,
                  delta_tickets: base_tickets_earned,
                  type: "earn",
                  note: `Completed: ${chore.name}`,
                  source: 'chore', // Explicitly 'chore'
                  ref_id: chore_id // Optional: reference the chore_id
                });
                ```
            *   Initialize `bonus_triggered = false` and `daily_bonus_id_for_spin = null`.
            *   **Check for Daily Bonus Eligibility:**
                *   Fetch the `dailyBonus` record for `user.id` and `today's date`.
                *   If `dailyBonusRecord && dailyBonusRecord.assigned_chore_id === chore_id && !dailyBonusRecord.is_spun && dailyBonusRecord.trigger_type === 'chore_completion'`:
                    *   Set `bonus_triggered = true;`
                    *   Set `daily_bonus_id_for_spin = dailyBonusRecord.id;`
            *   **Construct Response:**
                ```javascript
                const responsePayload = {
                  transaction, // The transaction for the base chore tickets
                  chore,
                  balance: await storage.getUserBalance(user.id), // Updated balance after base tickets
                  activeGoal: await storage.getActiveGoalByUser(user.id), // Updated goal progress
                  bonus_triggered: bonus_triggered,
                  daily_bonus_id: daily_bonus_id_for_spin
                };
                ```
            *   **Broadcast:** Send a WebSocket event for the `transaction:earn` (for base tickets).
            *   Return `res.status(201).json(responsePayload);`
        *   **Crucially, `/api/earn` should NOT attempt to calculate wheel spin results, award bonus spin tickets, or update `dailyBonus.is_spun` or `dailyBonus.spin_result_tickets`."**
*   **Acceptance Criteria:**
    *   `/api/earn` creates a transaction *only* for the base chore tickets.
    *   If it's a bonus-triggering chore completion, the API response correctly includes `bonus_triggered: true` and the valid `daily_bonus_id`.
    *   The `dailyBonus` table's `is_spun` and `spin_result_tickets` fields are *not* modified by `/api/earn`.
    *   Thorough `curl` testing or unit tests for `/api/earn` with both bonus and non-bonus chores.

**Task 2: Verify & Correct Backend `/api/bonus-spin` Logic (Agent - `server/routes.ts`)**

*   **Objective:** Ensure `/api/bonus-spin` correctly processes the spin, awards *only bonus tickets*, and updates state.
*   **Action for Agent:**
    *   **"Agent, please review and ensure the `POST /api/bonus-spin` endpoint in `server/routes.ts` adheres to this logic:**
        1.  Input: `{ daily_bonus_id: number }`. Authenticate user (child or parent acting for child).
        2.  Fetch `dailyBonus` record by `daily_bonus_id`. Validate it exists, belongs to the correct user (or child if parent is acting), and `is_spun === false`.
        3.  Perform weighted RNG for wheel segments (as previously defined, including "Double Base" cap and "Spin Again" logic â€“ `allow_respin` flag for recursion).
        4.  Calculate `additional_bonus_tickets_won`.
        5.  **Create a *new, separate transaction* for these `additional_bonus_tickets_won`:**
            ```javascript
            const bonusTransaction = await storage.createTransaction({
              user_id: dailyBonusRecord.user_id,
              chore_id: null, // Not directly for a chore, but for the bonus
              delta_tickets: additional_bonus_tickets_won,
              type: "earn", // Still an earning event
              note: `Bonus Wheel: ${segment_label}`,
              source: 'bonus_spin',
              ref_id: daily_bonus_id
            });
            ```
        6.  **Update `dailyBonus` record:** `is_spun = true`, `spin_result_tickets = additional_bonus_tickets_won`.
        7.  **Response:** Return spin outcome: `{ segment_label, tickets_awarded_this_spin: additional_bonus_tickets_won, new_child_balance: X, respin_allowed: boolean }`.
        8.  **Broadcast:** Send WebSocket event for the `transaction:earn` (for the bonus tickets) and/or a specific `bonus:spun` event."
*   **Acceptance Criteria:**
    *   `/api/bonus-spin` correctly processes spins for valid, unspun `daily_bonus_id`s.
    *   It creates a separate transaction *only for the tickets won from the spin*.
    *   It correctly updates the `dailyBonus` table (`is_spun`, `spin_result_tickets`).
    *   The "Double Base" and "Spin Again" rules are correctly implemented.
    *   Unit tests for various spin outcomes.

**Task 3: Frontend - Bonus Management Page Data Display (Agent - `client/src/components/daily-bonus-assignments.tsx`)**

*   **Objective:** Parents can see the assigned bonus chore for each child.
*   **Action for Agent:**
    *   **"Agent, ensure `client/src/components/daily-bonus-assignments.tsx` (used by `/bonus-management`) correctly fetches from `GET /api/daily-bonus/assignments` and displays for each child: their name, the assigned bonus chore name (with emoji), and whether it's a parent override. If no chore is assigned for a child for today, display 'None Assigned'."**
*   **Acceptance Criteria:**
    *   Bonus Management page accurately lists Bryce's assigned bonus chore and Kiki's assigned bonus chore for the current day.
    *   Information includes chore name, emoji, and override status.

---

Let's tackle these backend corrections and the parent display first. Once this data flow is unequivocally correct, the client-side triggering of the modal and handling the spin will be much more straightforward to implement and debug.

**Your immediate action:**
Please provide the agent with **Task 1 (Correct Backend `/api/earn` Logic)**. After that, **Task 2 (Verify & Correct Backend `/api/bonus-spin` Logic)**, and then **Task 3 (Frontend - Bonus Management Page Data Display)**.

We need to be very precise about the responsibilities of `/api/earn` vs. `/api/bonus-spin`.