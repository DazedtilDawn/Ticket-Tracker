# **AI Coding Agent Diagnostic & Resolution Prompt**

Use the following structured approach each time you collaborate with an AI Coding Agent that may have a knowledge cutoff or limited context. This flow ensures a thorough understanding of the problem, systematic root cause analysis, solution exploration, and preventive measures—along with a check for any missing information that might require an external search.

---

## 1. Context & Clue Gathering
**Prompt**:
> “Summarize the relevant context from the codebase and any observed symptoms or error messages. Clearly state the problems we are experiencing.”

**Why**:  
Ensures a solid, shared understanding of the immediate issues.

---

## 2. Knowledge Gap Check
**Prompt**:
> “Determine if your knowledge cutoff might be blocking you from certain up-to-date information needed to solve this issue. If so, provide the exact search question or query we should use to find the latest data (e.g., library updates, newer APIs, version changes).”

**Why**:  
Identifies whether more recent or external info is needed and suggests how to obtain it.

---

## 3. Hypothesize Possible Causes
**Prompt**:
> “List all plausible causes for these issues. For each cause, briefly explain why it might be relevant or likely.”

**Why**:  
Generates a wide range of explanations before drilling down to specifics.

---

## 4. Root Cause Analysis Using 5 Whys
**Prompt**:
> “For each potential cause, ask ‘Why is this happening?’ up to five times, digging down to the most specific and actionable root cause. After identifying this deeper reason, ask ‘So what does this mean for the broader system or codebase?’”

**Why**:  
Uncovers the deeper, often systemic factors behind surface-level errors.

---

## 5. Solution Exploration Using 5 Hows
**Prompt**:
> “For each root cause uncovered, do a ‘5 Hows’ sequence. The first ‘How’ can be high-level, with subsequent ‘How’ questions drilling down into increasingly detailed action steps.”

**Why**:  
Ensures a thorough, systematic approach to brainstorming concrete fixes.

---

## 6. Implementation Strategy
**Prompt**:
> “Outline how to implement each proposed solution throughout the codebase. Specify which files, functions, or modules must change. Provide code snippets or diffs, and explain how these changes resolve the identified issues.”

**Why**:  
Translates solutions into tangible code modifications.

---

## 7. Verification & Testing
**Prompt**:
> “Describe how to verify each fix. Suggest or update test suites, static analysis, or manual checks. If relevant, propose new or modified tests for edge cases and regression coverage.”

**Why**:  
Ensures that solutions are validated, preventing regression or unintended side effects.

---

## 8. Preventing Recurrence
**Prompt**:
> “Propose new rules, best practices, or linter configurations to prevent similar issues from arising. If applicable, suggest improvements to CI/CD pipelines or code review guidelines that enforce these measures.”

**Why**:  
Builds a long-term guardrail against repeating the same problems.

---

## 9. Summarize & Execute
**Prompt**:
> “Summarize each issue, its root cause, the solution, and how to verify. If permitted, implement the agreed-upon changes and provide a diff or clear report of all modifications made.”

**Why**:  
Closes the loop by confirming what changed, why, and how we confirmed success.

---

Use this prompt flow to ensure the AI Coding Agent thoroughly identifies, addresses, and prevents issues, while proactively handling any knowledge gaps by suggesting specific searches for the latest information.
