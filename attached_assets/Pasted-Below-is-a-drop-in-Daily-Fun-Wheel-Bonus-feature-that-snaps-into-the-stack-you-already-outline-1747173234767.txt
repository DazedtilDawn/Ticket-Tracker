Below is a drop-in ‚Äú**Daily Fun-Wheel Bonus**‚Äù feature that snaps into the stack you already outlined. It keeps the surprise hidden from kids, lets parents spin a wheel in the UI, and awards **1‚Äì5 tickets (90 % chance)** or **10 tickets (10 % chance)** on exactly **one chore per day**.

---

## 1 ‚É£ Data-model patch

```sql
-- alembic migration
CREATE TABLE daily_bonus (
    bonus_date          DATE        PRIMARY KEY,
    chore_id            INTEGER     REFERENCES chores(id) ON DELETE CASCADE,
    bonus_tickets       SMALLINT    NOT NULL CHECK (bonus_tickets IN (1,2,3,4,5,10))
);
```

*Only one row per date enforces ‚Äúone bonus chore per day‚Äù.*

---

## 2 ‚É£ Backend logic

### 2.1 Cron job (runs 02:00 America/New\_York)

```python
# api/jobs/assign_daily_bonus.py
@asyncpg.transaction()
async def assign_bonus(conn):
    today = date.today()
    exists = await conn.fetchval("SELECT 1 FROM daily_bonus WHERE bonus_date=$1", today)
    if exists:
        return  # already picked

    chore_id = await conn.fetchval(
        """SELECT id FROM chores
           WHERE is_active
           ORDER BY random()
           LIMIT 1"""
    )
    # 10-ticket prize with 10 % weight
    bonus = 10 if random.random() < 0.10 else random.randint(1, 5)
    await conn.execute(
        "INSERT INTO daily_bonus (bonus_date, chore_id, bonus_tickets) VALUES ($1,$2,$3)",
        today, chore_id, bonus
    )
```

Hook this file into your existing nightly scheduler:

```bash
python -m api.jobs.assign_daily_bonus
```

### 2.2 Awarding the bonus

```python
async def earn_chore(user_id: int, chore_id: int):
    tickets = await get_chore_tickets(chore_id)
    today    = date.today()
    bonus = await db.fetchval(
        """SELECT bonus_tickets
             FROM daily_bonus
            WHERE bonus_date=$1 AND chore_id=$2""",
        today, chore_id
    ) or 0
    total = tickets + bonus
    await create_transaction(user_id, chore_id, total)
    return total
```

*Audit trail ‚Äì the `transactions` row already stores `delta_tickets`; it will include the bonus.*

---

## 3 ‚É£ API shape (role-aware)

| Route              | Audience   | Response                                         |
| ------------------ | ---------- | ------------------------------------------------ |
| `GET /daily-bonus` | **parent** | `{ "chore_id": 17, "bonus_tickets": 3 }`         |
|                    | **kid**    | `{}` (empty 200)                                 |
| `POST /spin-wheel` | **parent** | (optional) returns CSS keyframes for confetti üí• |

*Role filter example:*

```python
@router.get("/daily-bonus")
async def daily_bonus(user=Depends(get_current_user)):
    if user.role != "parent":
        return {}
    row = await db.fetchrow("SELECT chore_id, bonus_tickets FROM daily_bonus WHERE bonus_date=$1", date.today())
    return row or {}
```

---

## 4 ‚É£ Frontend magic

### 4.1 Parent dashboard

```tsx
const { data: bonus } = useQuery("dailyBonus", fetchDailyBonus);

if (bonus.chore_id) {
  <ChoreCard
    {...chore}
    highlight={chore.id === bonus.chore_id}
    badge={<TicketIcon className="animate-pulse" />}
    footer={`üé° Spin Wheel: +${bonus.bonus_tickets} tickets`}
  />
}
```

*Visual cues*:

* spinning wheel icon from **lucide-react** (`import { FerrisWheel } from "lucide-react"`).
* `animate-spin-slow` Tailwind class on hover.
* On click, call `POST /spin-wheel` and trigger a **Framer-Motion** confetti burst over the card.

### 4.2 Kid dashboard

*No change.* ChoreCard renders without the bonus props, so they only discover the reward when they complete the task (‚ÄúSurprise! +3 tickets!‚Äù).

### 4.3 Completion pop-up

```tsx
if (bonusApplied) {
  <ConfettiModal
     title="Jackpot!"
     subtitle={`You found today's Fun Wheel chore and earned +${bonus} tickets!`}
  />
}
```

ConfettiModal already exists in your component list‚Äîjust feed it the bonus amount.

---

## 5 ‚É£ Unit tests

```python
def test_bonus_distribution():
    # 1 000 trials ‚áí should assign 10-ticket roughly 10 %
    tens = sum(assign_random_bonus() == 10 for _ in range(1000))
    assert 80 < tens < 120    # allow randomness wiggle room
```

```python
def test_bonus_awarded_once():
    # given a daily_bonus row...
    total = earn_chore(user_id=1, chore_id=bonus_chore_id)
    assert total == chore_tickets + bonus_tickets
```

---

## 6 ‚É£ ‚ÄúFun factor‚Äù extras (optional)

| Idea                                                          | How to add                                                    |
| ------------------------------------------------------------- | ------------------------------------------------------------- |
| **Haptic ding** on iOS/Android PWA when hidden bonus triggers | call `navigator.vibrate([30, 50, 30])`                        |
| **Leader-board** of who found the bonus most often            | new `bonus_hits` counter on users table                       |
| **Seasonal wheel skins**                                      | Tailwind classes keyed to month; e.g., snowflakes in December |

---

### Drop-in checklist

1. ‚úö Run the Alembic migration.
2. ‚úö Add the nightly `assign_daily_bonus` job.
3. ‚úö Patch `earn_chore` service to include bonus.
4. ‚úö Expose `/daily-bonus` endpoint (role-guarded).
5. ‚úö Update `ChoreCard` + `ConfettiModal` as shown.

Deploy, and the kids get a **daily hidden treasure**, while parents keep the secret. üé°‚ú®
