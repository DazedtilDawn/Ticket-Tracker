### Picking a behavior for the **“×2” slice**

| Option                                         | What happens when child lands on **×2**                                                                                                                                                                             | Pros                                                              | Cons                                                                |
| ---------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- | ------------------------------------------------------------------- |
| **A. *Re-spin & double*** (classic multiplier) | - Server returns `tickets_awarded: 0`, `multiplier: 2`, `respin_allowed: true`  →  UI fires a *second* spin immediately.<br>- When the 2nd spin finishes, tickets = `result × multiplier` (so 2 → 4, 5 → 10, etc.). | *Feels magical*, huge excitement.<br>*Fair*—actual reward scales. | Needs small server + client change to chain two spins.              |
| **B. *+2 tickets + re-spin***                  | Give an instant +2, then fire a 2nd spin for more.                                                                                                                                                                  | Simple maths; always “something”.                                 | Still two spins, but math less intuitive: 2❌ → 4 vs 2 ➕ (2nd spin). |
| **C. *Plain +2 tickets***                      | Just award 2, no respin.                                                                                                                                                                                            | Easiest (no multi-spin).                                          | The slice is no longer “×2”, kids may feel cheated.                 |

Most teams (and kids!) like **Option A** – a true multiplier that triggers an automatic respin.

---

## Implementing **Option A – “Re-spin & double”**

### 1 ⃝ Server (`POST /api/bonus-spin`)

```ts
// server/routes.ts  (inside bonus-spin handler)
const SEGMENT = wheelSegments[segmentIndex];

let awarded = SEGMENT.value;
let multiplier = 1;
let respinAllowed = false;

if (SEGMENT.type === "multiplier") {          // ← mark the ×2 slice like this
  multiplier   = SEGMENT.multiplier;          // e.g. 2
  awarded      = 0;                           // nothing yet
  respinAllowed = true;                       // client will call again
}

// when respinAllowed === true we set is_spun = false
await storage.updateDailyBonus(bonusId, {
  is_spun: !respinAllowed
});

return res.json({
  success: true,
  daily_bonus: bonus,
  segment_index: segmentIndex,
  segment_label: SEGMENT.label,
  tickets_awarded: awarded,
  multiplier,
  respin_allowed: respinAllowed,
});
```

### 2 ⃝ Client – tweak the wheel handler

```tsx
// child-bonus-wheel.tsx  (inside onSuccess of spinMutation)
if (data.respin_allowed) {
  // ① save multiplier in state
  setPendingMultiplier(data.multiplier);   // new useState<number>(1)

  // ② show a toast
  toast({
    title: `✨ ${data.multiplier}x Multiplier!`,
    description: `Spinning again to see how many tickets you’ll double!`,
  });

  // ③ immediately trigger another spin
  setTimeout(() => handleSpin(), 800);     // re-call the same spinMutation
  return;                                  // skip normal “show result” path
}

// ---- normal path ----
const totalTickets = data.tickets_awarded * pendingMultiplier;
setSpinResult(totalTickets);
setPendingMultiplier(1);
```

### 3 ⃝ Wheel segment definition

```ts
const WHEEL_SEGMENTS = [
  …,
  { label: "×2", color: "#7BC043", type: "multiplier", multiplier: 2 },
];
```

### 4 ⃝ Analytics / Transactions

* On the *second* spin the server will get a normal slice (e.g. value = 5).
* Multiply it server-side (`tickets_awarded *= pendingMultiplierFromBonusRow`) **before** creating the transaction so the ledger stores the final award.

Simplest approach:
`daily_bonus` row keeps a `pending_multiplier` column; first spin writes 2; second spin reads & consumes it.

---

## If you prefer **Option B** ( +2 tickets then respin )

1. Keep the multiplier logic out.
2. On ×2 slice → `tickets_awarded = 2`, `respin_allowed = true`.
3. Client shows “+2 tickets” *immediately* then fires the respin (no multiplier math).

---

## Quick UX copy

*Slice tooltip / helper text:*

> **×2 Bonus:** Spin again and we’ll *double* whatever you land on!

---

Let me know which flavour you want and I can supply the exact patch for the server + React component.
