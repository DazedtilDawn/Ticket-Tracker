Sprint 0: Stabilization & Foundational Fixes (Highest Priority)
Goal: Create a stable base. Fix showstopper bugs.
Task: Resolve WebSocket localhost:undefined Error.
Action:
Add debugger; inside the value: function(url, protocols) of the client/index.html WebSocket override script (as suggested previously).
When the debugger hits for the localhost:undefined URL, meticulously examine the Call Stack to identify the exact origin of this new WebSocket() call.
Based on the origin, determine if the HTML override can be further tweaked (e.g., mock object completeness) or if the issue lies deeper in module loading order.
Acceptance: The SyntaxError: Failed to construct 'WebSocket': The URL 'wss://localhost:undefined...' is GONE from the console. The application's own WebSocket to /ws (via websocketClient.ts) must still function correctly.
Task: Investigate & Fix Chore Re-completion Bug after Transaction "Cancellation".
Investigation:
Determine which API endpoint the "Undo" button in Transaction History calls (likely DELETE /api/transactions/:id).
Verify server/storage.ts -> deleteTransaction(): Does it correctly reverse goals.tickets_saved?
Crucially, determine if and how dailyBonus.revealed status is handled (or mishandled) by this "Undo" process for bonus-related chores. The user insight suggests it's not being reset.
Action:
Modify server/storage.ts -> deleteTransaction():
Ensure it correctly adjusts goals.tickets_saved if the undone transaction was an "earn" type affecting a goal.
Implement logic to reset dailyBonus.revealed = false and dailyBonus.bonus_tickets = null (or similar) if the undone transaction was the one that triggered a bonus reveal/award. This is key to allowing a clean re-completion.
Ensure client-side React Query caches (/api/stats, /api/chores, /api/transactions, /api/goals) are invalidated after a successful undo.
Acceptance: After "undoing" a completed chore transaction (especially a bonus one), the chore becomes available again, can be re-completed, and if it was a bonus chore, the bonus mechanism works correctly on the second attempt without errors.
Task: Investigate User Balance Calculation.
Action: Examine server/storage.ts -> getUserBalance() and related calls from /api/stats. Determine if balance is a direct sum of transactions.delta_tickets for the user, or if there's a denormalized balance field on the users table.
Decision Point: If it's not a direct sum, ensure any denormalized balance is updated atomically with every transaction creation/deletion. For simplicity and accuracy, summing transactions on demand is generally more robust for this scale.
Acceptance: Clear understanding of how balance is calculated and confidence in its accuracy.
Task: Improve Parent Sidebar Child Navigation.
Current Pain Point: "cumbersome" child selection at the bottom of the sidebar.
Action (Client): Redesign the child account switching mechanism in client/src/components/layout/sidebar.tsx and potentially client/src/components/account-switcher.tsx.
Consider moving the child account quick switcher to a more prominent, easily accessible location in the sidebar (e.g., directly under main navigation, or a dedicated, styled section).
Ensure the UX is quick and intuitive for parents.
Acceptance: Parents can switch between viewing their own dashboard and child dashboards much more easily.
Completion of Sprint 0 is CRITICAL before moving to new features.