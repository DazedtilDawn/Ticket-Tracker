Okay, the agent has made an attempt to address the critical issues, but your latest feedback indicates we still have a couple of significant disconnects, particularly around the Bonus Wheel trigger and the information displayed on the Bonus Management page.

Let's break this down very methodically, focusing on your specific feedback:

**Your Feedback & Observed Issues:**

1.  **Bonus Wheel Still Not Triggering Correctly:**
    *   "This is still not triggering the bonus wheel..."
    *   The desired flow: Complete bonus chore -> API confirms it's a bonus -> Client shows "Spin Prompt Modal" -> User clicks spin -> Client calls spin API -> Wheel UI animates to result.
    *   The agent's fix in `ChoreCard.tsx` was to check `response.bonus_triggered`. This is a step in the right direction, but the entire chain needs to work.
2.  **Bonus Management Page - Missing Information:**
    *   "...or showing where the bonus chore is for each child on the Bonus Management page."
    *   The page should clearly list: Child Name, Assigned Bonus Chore (Name & Emoji), Override option.
3.  **Random Bonus Chore Selection Criteria:**
    *   "...for the random bonus it should be a chore that's a daily chore."
    *   This is a new, important business rule for the random assignment logic.

---

### Detailed Analysis & Plan for Correction

**Issue 1: Bonus Wheel Still Not Triggering Correctly**

*   **Potential Points of Failure in the Chain:**
    1.  **Backend (`/api/earn` in `server/routes.ts`):**
        *   Is it *reliably* identifying the completed chore as the `assigned_bonus_chore_id` for the correct child and date?
        *   Is it *always* returning `{ bonus_triggered: true, daily_bonus_id: <ID> }` in the JSON response when it should?
        *   **Crucially:** Is it still *only* awarding base tickets and *not* pre-emptively awarding bonus tickets? (The agent's previous report said it was "Updated chore completion to account for bonus chores with additional tickets" which could be misinterpreted as adding bonus tickets directly in `/api/earn` rather than just flagging).
    2.  **Client (`ChoreCard.tsx` -> `handleComplete` -> `onComplete` prop):**
        *   The `onComplete` prop is likely the `handleChoreComplete` function in `Dashboard.tsx` or `Chores.tsx`.
        *   This parent `handleChoreComplete` function receives the response from `/api/earn`.
        *   **It is this parent function that needs to check `response.bonus_triggered` and `response.daily_bonus_id` and then set the state to open the `SpinPromptModal.tsx`.** The agent's fix to `ChoreCard.tsx` to check `response.bonus_triggered` is good, but it needs to *pass this information up or trigger the modal logic in its parent*.
    3.  **Client (`Dashboard.tsx` / `Chores.tsx` - State & Modal Logic):**
        *   Are the state variables (`isSpinPromptOpen`, `dailyBonusIdForSpin`, `choreNameForSpinModal`) being correctly set when `bonus_triggered` is true?
        *   Is the `SpinPromptModal.tsx` correctly rendered when `isSpinPromptOpen` is true?
    4.  **Client (`SpinPromptModal.tsx`):**
        *   Does its "Spin Now!" button correctly call a handler (e.g., `handleSpinWheel` in `Dashboard.tsx`) that then calls `POST /api/bonus-spin` with the `dailyBonusIdForSpin`?

*   **Action for Agent (Systematic Debugging & Correction):**
    1.  **"Agent, let's verify the `/api/earn` response structure. When a designated bonus chore is completed, log the exact JSON response being sent to the client. Confirm it includes `bonus_triggered: true` and the correct `daily_bonus_id`, and that *only base tickets* for the chore are included in the main transaction created by this endpoint."**
    2.  **"Agent, review `ChoreCard.tsx`. The `onComplete` prop calls a function in its parent (`Dashboard.tsx` or `Chores.tsx`). Ensure `ChoreCard` passes the *entire API response* (or at least `bonus_triggered` and `daily_bonus_id`) from `onComplete` back to its parent component, or that the parent `handleChoreComplete` itself handles the API call and its response directly."**
    3.  **"Agent, in `Dashboard.tsx` (and `Chores.tsx` if applicable), within the `handleChoreComplete` function (or whatever `ChoreCard`'s `onComplete` calls): After a successful API call to `/api/earn`, check the `response.bonus_triggered`. If true, set the state variables `isSpinPromptOpen = true`, `setDailyBonusIdForSpin(response.daily_bonus_id)`, and `setCompletedChoreName(response.chore.name)` to correctly show the `SpinPromptModal`."**
    4.  **"Agent, ensure `SpinPromptModal.tsx`'s 'Spin Now' button correctly triggers the `handleSpinWheel` function, which then calls `POST /api/bonus-spin` with the `dailyBonusIdForSpin`."**

**Issue 2: Bonus Management Page - Missing Information**

*   **Current State:** The agent created `bonus-management.tsx` and `daily-bonus-assignments.tsx`. The latest screenshot shows this page exists.
*   **Your Feedback:** "...not showing where the bonus chore is for each child on the Bonus Management page."
*   **Required Functionality (Reiteration):**
    *   The page must call `GET /api/daily-bonus/assignments` (for today).
    *   It must then map over the response array and display for each child:
        *   Child's Name (e.g., Bryce).
        *   Assigned Bonus Chore: "[Emoji] Chore Name".
        *   Status: "System Assigned" or "Parent Override".
        *   "Change Chore" button/dropdown.
*   **Action for Agent (Frontend - `daily-bonus-assignments.tsx`):**
    *   **"Agent, please update `client/src/components/daily-bonus-assignments.tsx` (used by `/bonus-management` page):**
        1.  **Fetch Data:** Ensure it uses `useQuery` to call `GET /api/daily-bonus/assignments?date=YYYY-MM-DD` (default to today). The backend should return an array like `[{ userId: number, childName: string, assignedChore: { id: number, name: string, emoji: string | null }, isOverride: boolean, dailyBonusId: number }, ...]`.
        2.  **Display Data:** Render a table or list. For each item in the fetched array:
            *   Display `childName`.
            *   Display `assignedChore.emoji` (if present) + `assignedChore.name`. If `assignedChore` is null (no bonus assigned yet), display "None Assigned".
            *   Display "System Assigned" or "Parent Override" based on `isOverride`.
        3.  **"Change Chore" Button:** Place this next to each assignment. Clicking it should open a modal/dropdown (see next point)."
    *   **"Agent, for the 'Change Chore' functionality on the Bonus Management page:**
        1.  When 'Change Chore' is clicked for a specific child's assignment, fetch all *active* chores (`GET /api/chores?activeOnly=true`).
        2.  Display these in a `Select` dropdown, filtering out the *currently assigned* bonus chore for that child and any chores on cooldown (client-side filtering for cooldown is acceptable for v1 if `chores.last_bonus_assigned` is available in `/api/chores` response).
        3.  On selection, use `useMutation` to call `PUT /api/daily-bonus/assign` with `{ user_id (child), new_chore_id, date }`.
        4.  On success, invalidate the `['/api/daily-bonus/assignments']` query to refresh the list."

**Issue 3: Random Bonus Chore Selection Criteria**

*   **Your Feedback:** "...for the random bonus it should be a chore that's a daily chore."
*   **Impact:** This means the `server/storage.ts -> assignDailyBonusChore()` function needs to filter chores based on their `recurrence` field.
*   **Action for Agent (Backend - `server/storage.ts`):**
    *   **"Agent, please modify the `storage.assignDailyBonusChore(child_id, date)` function. When selecting a random chore, it must now *only* consider chores where `is_active = true` AND `recurrence = 'daily'`. Continue to respect the `last_bonus_assigned` cooldown."**

---

### Prioritized Next Steps for the Agent:

This requires a mix of backend and frontend fixes.

1.  **Backend Fix (Random Chore Criteria):**
    *   Agent: Modify `storage.assignDailyBonusChore` to filter for `recurrence: 'daily'`.
2.  **Backend Fix (Bonus Trigger Flow - `/api/earn`):**
    *   Agent: Ensure `/api/earn` only awards base tickets and correctly returns `bonus_triggered: true` and `daily_bonus_id` without attempting to determine or award bonus spin tickets itself.
3.  **Frontend Fix (Parental Bonus Management Display):**
    *   Agent: Implement data fetching and display logic in `daily-bonus-assignments.tsx` as detailed above.
4.  **Frontend Fix (Bonus Wheel Trigger Flow - Client Side):**
    *   Agent: Correct the client-side logic in `Dashboard.tsx` / `Chores.tsx` (via `ChoreCard.tsx`) to use the response from `/api/earn` to open the `SpinPromptModal` with the correct `daily_bonus_id`.
5.  **Frontend Fix (Parental Bonus Override UI):**
    *   Agent: Implement the "Change Chore" button/dropdown and API call logic on the bonus management page.

**Request to Agent (for immediate next steps):**

**"Agent, thank you. We have critical fixes for the Daily Bonus System:**

1.  **Backend - Random Chore Selection:** Modify `storage.assignDailyBonusChore` so that it only considers chores with `recurrence = 'daily'` (in addition to `is_active` and cooldown) when randomly assigning a bonus chore.
2.  **Backend - Correct `/api/earn` Behavior:** Ensure the `/api/earn` endpoint, when a designated bonus chore is completed, *only* awards base tickets for that chore. Its JSON response *must* include `bonus_triggered: true` and the correct `daily_bonus_id`. It should *not* pre-calculate or award bonus tickets from the wheel itself, nor set `daily_bonus.is_spun = true`.
3.  **Frontend - Display Bonus Assignments on Management Page:** Update `client/src/components/daily-bonus-assignments.tsx` to fetch from `GET /api/daily-bonus/assignments` and correctly display each child's assigned bonus chore (name, emoji), and whether it's a parent override.
4.  **Frontend - Fix Wheel Trigger Logic:** Correct the client-side flow in `Dashboard.tsx` (and `Chores.tsx`). The function called by `ChoreCard.tsx`'s `onComplete` prop (likely `handleChoreComplete`) must use the `bonus_triggered` and `daily_bonus_id` from the `/api/earn` response to properly set state and open the `SpinPromptModal.tsx`."

After these are done, we will test the parent's ability to see assignments and the child's prompt to spin. Then we'll tackle the parent's override UI.