import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useAuthStore } from "@/store/auth-store";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import {
  Loader2,
  RefreshCw,
  Star,
  Rocket,
  Volume2,
} from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { toast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";

/** ------------------------------------------------------------------
 *  DAILY BONUS WHEEL ‚Äî ‚ÄúULTIMATE‚Äù VERSION
 *  ‚Äï Upright labels
 *  ‚Äï Glow‚Äëwinning slice
 *  ‚Äï Click‚Äëclack tick sound while spinning
 *  ‚Äï Hub LED pulse during spin
 *  ‚Äï Extra fire‚Äëwork confetti on 10‚Äëticket win
 *  ‚Äï Screen‚Äëreader + haptic feedback
 *  -----------------------------------------------------------------*/

interface UserInfo {
  id: number;
  name: string;
  username: string;
  role: string;
}

/* ------------------------ wheel configuration ------------------- */
const WHEEL_SEGMENTS = [
  { value: 1, color: "#FF6384", label: "1", textColor: "#FFF" },
  { value: 2, color: "#36A2EB", label: "2", textColor: "#FFF" },
  { value: 3, color: "#FFCE56", label: "3", textColor: "#222" },
  { value: 5, color: "#4BC0C0", label: "5", textColor: "#FFF" },
  { value: 2, color: "#9966FF", label: "2", textColor: "#FFF" },
  { value: 10, color: "#FF9F40", label: "10", textColor: "#222" },
  { value: 3, color: "#FF66CC", label: "3", textColor: "#FFF" },
  { value: 4, color: "#7BC043", label: "4", textColor: "#FFF" },
];

export function DailyBonusWheel() {
  const { isViewingAsChild, getChildUsers } = useAuthStore();
  const [selectedChild, setSelectedChild] = useState("");
  const [selectedChore, setSelectedChore] = useState("");
  const [isSpinning, setIsSpinning] = useState(false);
  const [spinResult, setSpinResult] = useState<number | null>(null);
  const [rotationDegrees, setRotationDegrees] = useState(0);
  const wheelRef = useRef<HTMLDivElement>(null);
  const tickInterval = useRef<NodeJS.Timeout>();
  const queryClient = useQueryClient();

  /* preload tick sound */
  const tickAudioRef = useRef<HTMLAudioElement | null>(null);
  useEffect(() => {
    tickAudioRef.current = new Audio("/sounds/tick.mp3");
    tickAudioRef.current.volume = 0.4;
  }, []);

  /* --------------- data queries --------------------------------- */
  const childUsers = getChildUsers();
  const { data: chores = [] } = useQuery({
    queryKey: ["/api/chores"],
    enabled: !isViewingAsChild(),
  });

  /* --------------- mutation ------------------------------------- */
  const spinMutation = useMutation({
    mutationFn: (data: { user_id: number; chore_id: number }) =>
      apiRequest("/api/spin-wheel", { method: "POST", body: JSON.stringify(data) }),
    onSuccess: (data) => {
      setTimeout(() => {
        toast({
          title: "üéä Wheel spun successfully! üéä",
          description: `A bonus of ${data.daily_bonus.bonus_tickets} tickets has been assigned!`,
        });
        queryClient.invalidateQueries({ queryKey: ["/api/stats"] });
        setTimeout(() => {
          setIsSpinning(false);
          setSpinResult(null);
          tickInterval.current && clearInterval(tickInterval.current);
        }, 4000);
      }, 8200);
    },
    onError: (err: any) => {
      toast({ title: "Error", description: err.message || "Spin failed", variant: "destructive" });
      setIsSpinning(false);
    },
  });

  /* ---------------- spin handler -------------------------------- */
  const handleSpinWheel = () => {
    if (!selectedChild || !selectedChore) {
      toast({ title: "Missing info", description: "Select child & chore", variant: "destructive" });
      return;
    }

    setIsSpinning(true);
    // start tick sound
    tickInterval.current = setInterval(() => tickAudioRef.current?.play(), 90);

    // wind‚Äëup backwards
    setRotationDegrees(-25);
    setTimeout(() => {
      const randomIndex = Math.floor(Math.random() * WHEEL_SEGMENTS.length);
      const result = WHEEL_SEGMENTS[randomIndex];
      const segmentSize = 360 / WHEEL_SEGMENTS.length;
      const target = 4320 + randomIndex * segmentSize;
      setRotationDegrees(target);

      // highlight slice when wheel stops
      setTimeout(() => {
        if (wheelRef.current) {
          wheelRef.current
            .querySelectorAll<HTMLElement>(".wheel-slice")[randomIndex]
            ?.classList.add("ring-4", "ring-yellow-300", "animate-pulse");
        }
        setSpinResult(result.value);
        navigator.vibrate?.([40, 60, 40]); // haptic
        if (result.value === 10) {
          // extra confetti burst
          import("canvas-confetti").then((m) => {
            const fire = m.default;
            fire({ particleCount: 120, spread: 80, origin: { y: 0.6 } });
          });
        }
      }, 7600);

      // send API
      setTimeout(() => {
        spinMutation.mutate({ user_id: +selectedChild, chore_id: +selectedChore });
      }, 400);
    }, 300);
  };

  if (isViewingAsChild()) return null;

  /* ---------------- component JSX ------------------------------ */
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl text-center">Daily Fun‚ÄëWheel Bonus</CardTitle>
        <CardDescription className="text-center">Spin the wheel to assign a hidden bonus!</CardDescription>
      </CardHeader>

      <CardContent className="flex flex-col items-center">
        {/* Wheel + pointer */}
        <div className="relative w-72 h-72 mb-6 select-none">
          {/* pointer */}
          <div className="absolute -top-6 left-1/2 -translate-x-1/2 z-20 flex flex-col items-center">
            <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center shadow-lg border-2 border-yellow-300">
              <Star className="w-4 h-4 text-white" />
            </div>
            <div className="w-0 h-0 border-l-8 border-r-8 border-t-12 border-l-transparent border-r-transparent border-t-yellow-600" />
          </div>

          {/* wheel */}
          <div
            ref={wheelRef}
            onClick={!isSpinning ? handleSpinWheel : undefined}
            className={cn(
              "w-full h-full rounded-full shadow-xl relative overflow-hidden transition-transform",
              isSpinning ? "cursor-wait" : "cursor-pointer hover:scale-[1.03]"
            )}
            style={{
              transform: `rotate(${rotationDegrees}deg)`,
              transition: isSpinning ? "transform 8s cubic-bezier(0.16,1,0.3,1)" : undefined,
              border: "6px solid #fff",
              outline: "2px solid #ddd",
            }}
          >
            {/* slices */}
            {WHEEL_SEGMENTS.map((seg, idx) => {
              const sliceAngle = 360 / WHEEL_SEGMENTS.length;
              const rotate = idx * sliceAngle;
              const tan = Math.tan((sliceAngle / 2) * (Math.PI / 180));
              const y1 = 50 - tan * 50;
              const y2 = 50 + tan * 50;
              return (
                <div
                  key={idx}
                  className="absolute inset-0 wheel-slice"
                  style={{ transform: `rotate(${rotate}deg)` }}
                >
                  <div
                    className="absolute inset-0"
                    style={{
                      background: seg.color,
                      clipPath: `polygon(50% 50%,100% ${y1}%,100% ${y2}%)`,
                      borderRight: "1px solid rgba(0,0,0,0.1)",
                    }}
                  />
                  {/* label */}
                  <div
                    className="absolute inset-0 flex items-center justify-center pointer-events-none"
                    style={{ transform: `rotate(${-rotate - sliceAngle / 2}deg)` }}
                  >
                    <span
                      className="font-extrabold text-lg"
                      style={{ color: seg.textColor, transform: "translateY(-45%)" }}
                    >
                      {seg.label}
                    </span>
                  </div>
                </div>
              );
            })}
            {/* hub */}
            <div
              className={cn(
                "absolute left-1/2 top-1/2 w-16 h-16 -translate-x-1/2 -translate-y-1/2 rounded-full bg-gradient-to-b from-white to-gray-200 flex flex-col items-center justify-center border-2 border-gray-300 shadow-lg",
                isSpinning && "hub-led"
              )}
            >
              <Star className="w-4 h-4 text-yellow-500 mb-0.5" />
              <span className="font-bold text-gray-800 text-sm">SPIN!</span>
            </div>
          </div>
        </div>

        {/* result for SR & visual */}
        {spinResult && (
          <div className="mb-6" aria-live="polite">
            <span className="inline-flex items-center gap-1 text-4xl font-bold bg-white/80 px-6 py-3 rounded-full border-2 border-pink-400 shadow">
              <span className="text-yellow-500">+{spinResult}</span>
              <span className="text-purple-600">tickets!</span>
            </span>
          </div>
        )}

        {/* selectors */}
        <div className="grid gap-4 w-full max-w-md">
          <div className="grid gap-1">
            <label className="text-sm font-medium">Child</label>
            <Select value={selectedChild} onValueChange={setSelectedChild} disabled={isSpinning}>
              <SelectTrigger>
                <SelectValue placeholder="Select child" />
              </SelectTrigger>
              <SelectContent>
                {childUsers.map((c: UserInfo) => (
                  <SelectItem key={c.id} value={c.id.toString()}>{c.name}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="grid gap-1">
            <label className="text-sm font-medium">Chore</label>
            <Select value={selectedChore} onValueChange={setSelectedChore} disabled={isSpinning}>
              <SelectTrigger>
                <SelectValue placeholder="Select chore" />
              </SelectTrigger>
              <SelectContent>
                {Array.isArray(chores) &&
                  chores.map((ch: any) => (
                    <SelectItem key={ch.id} value={ch.id.toString()}>{`${ch.name} (${ch.tickets})`}</SelectItem>
                  ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </CardContent>

      <CardFooter>
        <Button
          onClick={handleSpinWheel}
          disabled={isSpinning || spinMutation.isPending || !selectedChild || !selectedChore}
          className={cn(
            "w-full text-lg font-bold py-6 relative overflow-hidden",
            isSpinning ? "bg-gray-500/80 cursor-wait" : "bg-gradient-to-r from-pink-500 via-purple-500 to-yellow-500 hover:shadow-lg"
          )}
        >
          {isSpinning ? (
            <>
              <Loader2 className="mr-2 h-5 w-5 animate-spin" /> Spinning‚Ä¶
            </>
          ) : (
            <>
              <RefreshCw className="mr-2 h-5 w-5" /> Spin the Lucky Wheel!
            </>
          )}
        </Button>
      </CardFooter>

      {/* styles */}
      <style>{`
        .hub-led { animation: ledpulse 1s ease-in-out infinite; }
        @keyframes ledpulse { 50% { box-shadow:0 0 12px #ffd700 } }
      `}</style>
    </Card>
  );
}
