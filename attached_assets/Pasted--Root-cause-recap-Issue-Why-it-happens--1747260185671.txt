## Root-cause recap

| Issue                                                     | Why it happens                                                                                                                                                                                             | Fix                                                                                                                      |
| --------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
| **Two slices show garbled / missing numbers**             | We rotate the bottom-half labels by **180 ¬∞** (`flip`), which keeps them upright but‚Äîbecause the anchor point is the text‚Äôs centre‚Äîalso reverses the character order. So `10 ‚Üí 01`, `3 ‚Üí ∆ê`, `5 ‚Üí ∆ß`, etc. | **Stop rotating glyphs.** They already render inside the wheel right-side-up; the extra flip mangles multi-digit values. |
| **Wheel isn‚Äôt using `wheelspin.mp3` / `celebration.mp3`** | `SOURCES.wheel` and `SOURCES.cheer` still reference the *old* filenames (`wheel.mp3`, `cheer.mp3`). `pickAudio` therefore returns `null`, triggering the sine-wave fallback.                               | Point the source array at the new files **or** pass them directly when you create the player.                            |

Below are the two minimal patches you need; everything else can stay exactly as is.

---

### 1  ‚Äî Label patch (remove the flip)

```diff
 /* keep text upright: flip anything in the lower half-circle */
-const flip  = mid > 90 && mid < 270 ? 180 : 0;
+const flip  = 0;                     // ‚Üê no rotation needed

 ‚Ä¶
 <text
   x={x}
   y={y}
   dominantBaseline="middle"
   textAnchor="middle"
   fontWeight="700"
   fontSize="9"
   fill={seg.text}
-  transform={`rotate(${flip} ${x} ${y})`}
+  /* no transform ‚Üí digits stay legible and in correct order */
 >
   {seg.label}
 </text>
```

Result: every slice now shows **1 2 3 5 2 3 10 1** exactly as in the data,
with no weird glyphs.

---

### 2  ‚Äî Audio sources patch

`/src/utils/audio.ts`

```diff
export const SOURCES = {
-  wheel: ['/sounds/wheel.mp3', '/sounds/wheel.ogg'],
-  cheer: ['/sounds/cheer.mp3', '/sounds/cheer.ogg'],
+  wheel: ['/sounds/wheelspin.mp3', '/sounds/wheelspin.ogg'],
+  cheer: ['/sounds/celebration.mp3', '/sounds/celebration.ogg'],
};
```

> **Tip:** keep both `.mp3` and `.ogg` so `pickAudio()` can still fall back
> to whichever codec the browser prefers.

No other code changes are needed; your existing `createLoopingAudio` and
`playOnce` calls will now find the new files and play them.

---

### 3  ‚Äî Quick verification

| Test                               | Expected                                                                                                                      |
| ---------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |
| Reload page                        | All eight slice labels show correct numbers.                                                                                  |
| Spin wheel                         | You hear the full `wheelspin.mp3` loop, then `celebration.mp3` once the wheel stops. No console ‚ÄúNotSupportedError‚Äù messages. |
| Bottom-half slices (`idx=4,5,6,7`) | Labels display as *2 3 10 1* (not ∆ß ∆ê 01 L).                                                                                  |

Apply those two tiny patches and the Fun-Wheel is back to 100 % ‚Äî visually crisp, fully voiced, and ready for happy spins. üõûüéâ
